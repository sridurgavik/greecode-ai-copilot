import { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format } from "date-fns";
import { CalendarIcon, Copy, FileUp, AlertCircle } from "lucide-react";
import { cn } from "@/lib/utils";
import { supabase } from "@/integrations/supabase/client";

// Types
interface PasskeyData {
  passkey: string;
  job_role: string;
  company: string;
  is_used: boolean;
  user_id: string;
}

const CopilotSection = () => {
  const [showPasskeyForm, setShowPasskeyForm] = useState<boolean>(false);
  const [generatedPasskey, setGeneratedPasskey] = useState<string>("");
  const [resumeFile, setResumeFile] = useState<File | null>(null);
  const [jobRole, setJobRole] = useState<string>("");
  const [company, setCompany] = useState<string>("");
  const [jobDescription, setJobDescription] = useState<string>("");
  const [date, setDate] = useState<Date | undefined>();
  const [time, setTime] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [passkeyError, setPasskeyError] = useState<string>("");
  const [paymentComplete, setPaymentComplete] = useState<boolean>(false);
  const [paymentProcessing, setPaymentProcessing] = useState<boolean>(false);
  const [paymentError, setPaymentError] = useState<string>("");
  const [resumeUrl, setResumeUrl] = useState<string>("");
  const [resumeAnalysis, setResumeAnalysis] = useState<string>("");
  const [uploadError, setUploadError] = useState<string>("");
  const { toast } = useToast();
  const razorpayFormRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Check for payment status changes from URL parameters
  useEffect(() => {
    const queryParams = new URLSearchParams(window.location.search);
    const paymentStatus = queryParams.get("payment_status");
    const paymentId = queryParams.get("payment_id");
    
    if (paymentStatus === "success" && paymentId) {
      setPaymentComplete(true);
      toast({
        title: "Payment Successful",
        description: "Your payment was processed successfully.",
      });
      
      // Generate passkey automatically after successful payment
      if (showPasskeyForm) {
        handleGeneratePasskey();
      }
      
      // Clear URL params without refreshing
      window.history.replaceState({}, document.title, window.location.pathname);
    } else if (paymentStatus === "failure") {
      setPaymentError("Payment failed. Please try again.");
      toast({
        title: "Payment Failed",
        description: "Your payment could not be processed. Please try again.",
        variant: "destructive",
      });
      
      // Clear URL params without refreshing
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }, [toast]);

  // Initialize payment button when form is shown
  useEffect(() => {
    // Only run this effect when form is shown and not already paid
    if (showPasskeyForm && !paymentComplete && razorpayFormRef.current) {
      // Clear previous content
      razorpayFormRef.current.innerHTML = '';
      
      // Create the form element
      const form = document.createElement('form');
      
      // Create the script element
      const script = document.createElement('script');
      script.src = 'https://checkout.razorpay.com/v1/payment-button.js';
      script.async = true;
      script.setAttribute('data-payment_button_id', 'pl_QOEa41foHVbd1v');
      
      // Add script to form
      form.appendChild(script);
      
      // Add form to container
      razorpayFormRef.current.appendChild(form);
    }
  }, [showPasskeyForm, paymentComplete]);

  // Handle file upload and analysis
  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    setUploadError("");
    const file = e.target.files?.[0];
    if (file) {
      setResumeFile(file);
      
      // Check file type
      const fileExt = file.name.split('.').pop()?.toLowerCase();
      if (fileExt !== 'pdf' && fileExt !== 'doc' && fileExt !== 'docx') {
        setUploadError("Please upload a PDF or DOC file.");
        return;
      }
      
      // Check file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setUploadError("File size exceeds 5MB limit.");
        return;
      }
      
      // Upload the file
      try {
        setIsLoading(true);
        
        // Get the current user
        const { data: { user } } = await supabase.auth.getUser();
        
        if (user) {
          const fileName = `${user.id}-${Math.random().toString(36).substring(2)}.${fileExt}`;
          
          // Check if storage bucket exists, if not create it
          const { data: buckets } = await supabase.storage.listBuckets();
          const resumeBucketExists = buckets?.some(bucket => bucket.name === 'resumes');
          
          if (!resumeBucketExists) {
            await supabase.storage.createBucket('resumes', {
              public: false
            });
          }
          
          const { data, error } = await supabase.storage
            .from('resumes')
            .upload(fileName, file);
            
          if (error) {
            throw error;
          }
          
          // Get public URL
          const { data: urlData } = supabase.storage
            .from('resumes')
            .getPublicUrl(fileName);
            
          setResumeUrl(urlData.publicUrl);
          
          // Perform resume analysis based on file content
          const fileContent = await readFileAsText(file);
          const keywords = extractKeywords(fileContent);
          const detectedRole = extractJobRole(fileContent);
          
          // If no job role was set but we detected one, use it
          if (!jobRole && detectedRole) {
            setJobRole(detectedRole);
          }
          
          // Create comprehensive analysis
          const analysisText = `Resume analysis: Found experience in ${
            jobRole || detectedRole || "software development"
          }. Keywords extracted: ${keywords.join(", ")}.`;
          
          setResumeAnalysis(analysisText);
          
          toast({
            title: "Resume Uploaded",
            description: "Resume analyzed successfully. Keywords extracted for interview preparation.",
          });
        }
        
        setIsLoading(false);
      } catch (error) {
        console.error("File upload error:", error);
        setUploadError("Failed to upload resume. Please try again.");
        setIsLoading(false);
      }
    }
  };

  // Function to read file as text
  const readFileAsText = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target?.result as string || "");
      reader.onerror = (e) => reject(e);
      reader.readAsText(file);
    });
  };
  
  // Function to extract job role from resume
  const extractJobRole = (content: string): string => {
    const jobTitles = [
      "Software Engineer", "Developer", "Frontend", "Backend", "Full Stack", 
      "DevOps", "Data Scientist", "Project Manager", "Product Manager",
      "UX Designer", "UI Designer", "QA Engineer", "Tester", "Architect"
    ];
    
    for (const title of jobTitles) {
      if (content.toLowerCase().includes(title.toLowerCase())) {
        return title;
      }
    }
    
    return "";
  };
  
  // Function to extract keywords from resume
  const extractKeywords = (content: string): string[] => {
    const techKeywords = [
      "JavaScript", "React", "TypeScript", "Node.js", "HTML", "CSS", "Python",
      "Java", "C#", "AWS", "Azure", "Docker", "Kubernetes", "SQL", "NoSQL",
      "MongoDB", "Git", "CI/CD", "Agile", "Scrum", "REST API", "GraphQL",
      "Testing", "TDD", "Performance", "Optimization", "UI/UX", "Communication Skills"
    ];
    
    return techKeywords.filter(keyword => 
      content.toLowerCase().includes(keyword.toLowerCase())
    ).slice(0, 10); // Limit to 10 keywords
  };

  // Handle generate passkey
  const handleGeneratePasskey = async () => {
    setUploadError("");
    
    if (!resumeFile) {
      setUploadError("Please upload your resume.");
      return;
    }
    
    if (!jobRole || !company) {
      toast({
        title: "Error",
        description: "Please enter job role and company name.",
        variant: "destructive",
      });
      return;
    }
    
    if (!date || !time) {
      toast({
        title: "Error",
        description: "Please select interview date and time.",
        variant: "destructive",
      });
      return;
    }
    
    if (!paymentComplete) {
      toast({
        title: "Payment Required",
        description: "Please complete the payment to generate a passkey.",
        variant: "destructive",
      });
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Get the current user
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        throw new Error("You must be logged in to generate a passkey.");
      }
      
      // Generate a random 6-digit passkey
      const newPasskey = Math.floor(100000 + Math.random() * 900000).toString();
      
      // Save the passkey to Supabase
      await supabase.from("passkeys").insert({
        passkey: newPasskey,
        user_id: user.id,
        job_role: jobRole,
        company: company,
        job_description: jobDescription || null,
        resume_url: resumeUrl,
        expires_at: new Date(date!.setHours(parseInt(time.split(':')[0]), parseInt(time.split(':')[1]))).toISOString(),
        is_used: false,
      });
      
      setGeneratedPasskey(newPasskey);
      setIsLoading(false);
      
      toast({
        title: "Passkey Generated",
        description: "Your interview is scheduled successfully.",
      });
    } catch (error) {
      console.error("Generate passkey error:", error);
      setIsLoading(false);
      toast({
        title: "Error",
        description: "Failed to generate passkey. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleCopyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied",
        description: "Passkey copied to clipboard.",
      });
    } catch (error) {
      console.error("Copy error:", error);
      toast({
        title: "Error",
        description: "Failed to copy passkey. Please try again.",
        variant: "destructive",
      });
    }
  };

  // Trigger file input click
  const handleChooseFile = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="space-y-4">
      {!showPasskeyForm ? (
        <div className="flex flex-col items-center justify-center py-12">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="text-center mb-8"
          >
            <h2 className="text-2xl font-bold mb-2">Interview Preparation Assistant</h2>
            <p className="text-muted-foreground max-w-md mx-auto">
              Generate a passkey to access our AI-powered interview assistant. Get real-time feedback and practice for your upcoming interviews.
            </p>
          </motion.div>
          
          <Button 
            onClick={() => setShowPasskeyForm(true)} 
            className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-white font-semibold py-6 px-8 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 text-lg"
          >
            <motion.div
              initial={{ scale: 1 }}
              whileHover={{ scale: 1.05 }}
              className="flex items-center space-x-2"
            >
              <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
              </svg>
              <span>Generate New Passkey</span>
            </motion.div>
          </Button>
          
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3, duration: 0.5 }}
            className="mt-12 grid gap-6 md:grid-cols-3 max-w-4xl mx-auto"
          >
            <div className="rounded-lg border bg-card p-4 shadow-sm">
              <div className="flex items-center space-x-3 mb-3">
                <div className="rounded-full bg-primary/10 p-2">
                  <svg className="h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
                    <polyline points="14 2 14 8 20 8"/>
                  </svg>
                </div>
                <h3 className="font-medium">Resume Analysis</h3>
              </div>
              <p className="text-sm text-muted-foreground">Upload your resume and get AI-powered insights to improve your chances.</p>
            </div>
            
            <div className="rounded-lg border bg-card p-4 shadow-sm">
              <div className="flex items-center space-x-3 mb-3">
                <div className="rounded-full bg-primary/10 p-2">
                  <svg className="h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <circle cx="12" cy="12" r="10"/>
                    <path d="M12 8v4l3 3"/>
                  </svg>
                </div>
                <h3 className="font-medium">Mock Interviews</h3>
              </div>
              <p className="text-sm text-muted-foreground">Practice with our AI interviewer and get feedback on your responses.</p>
            </div>
            
            <div className="rounded-lg border bg-card p-4 shadow-sm">
              <div className="flex items-center space-x-3 mb-3">
                <div className="rounded-full bg-primary/10 p-2">
                  <svg className="h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
                    <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
                  </svg>
                </div>
                <h3 className="font-medium">Personalized Tips</h3>
              </div>
              <p className="text-sm text-muted-foreground">Get customized advice based on your target role and company.</p>
            </div>
          </motion.div>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex justify-between items-center mb-6">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Button 
                variant="ghost" 
                onClick={() => setShowPasskeyForm(false)}
                className="flex items-center gap-1"
              >
                <svg className="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M19 12H5M12 19l-7-7 7-7"/>
                </svg>
                <span>Back</span>
              </Button>
            </motion.div>
            <motion.h2 
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
              className="text-xl font-semibold"
            >
              Generate New Passkey
            </motion.h2>
            <div className="w-[72px]"></div> {/* Spacer for alignment */}
          </div>
          
          {!generatedPasskey ? (
            <Card>
              <CardHeader>
                <CardTitle>Generate New Passkey</CardTitle>
                <CardDescription>
                  Schedule a new interview and get a passkey
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="resume">Upload Resume</Label>
                  <div className="flex items-center gap-2">
                    <div className="relative flex items-center w-full max-w-xs">
                      <Button 
                        type="button" 
                        variant="outline"
                        onClick={handleChooseFile} 
                        className="w-full justify-start text-left font-normal truncate"
                      >
                        {resumeFile ? resumeFile.name : "Choose File"}
                      </Button>
                      <Input
                        ref={fileInputRef}
                        id="resume"
                        type="file"
                        accept=".pdf,.doc,.docx"
                        onChange={handleFileChange}
                        className="hidden"
                        disabled={isLoading}
                      />
                      {resumeFile && <FileUp className="h-4 w-4 text-primary absolute right-3" />}
                    </div>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Upload your resume in PDF or DOC format
                  </p>
                  {uploadError && (
                    <div className="text-destructive flex items-center text-sm mt-1">
                      <AlertCircle className="h-4 w-4 mr-1" />
                      {uploadError}
                    </div>
                  )}
                </div>

                {resumeAnalysis && (
                  <div className="rounded-md bg-muted p-3 text-sm">
                    <p className="font-medium mb-1">Resume Analysis</p>
                    <p className="text-muted-foreground">{resumeAnalysis}</p>
                  </div>
                )}

                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="jobRole">Job Role</Label>
                    <Input
                      id="jobRole"
                      placeholder="E.g., Frontend Developer"
                      value={jobRole}
                      onChange={(e) => setJobRole(e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="company">Company</Label>
                    <Input
                      id="company"
                      placeholder="E.g., Google"
                      value={company}
                      onChange={(e) => setCompany(e.target.value)}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="jobDescription">Job Description (Optional)</Label>
                  <Input
                    id="jobDescription"
                    placeholder="Paste job description here"
                    value={jobDescription}
                    onChange={(e) => setJobDescription(e.target.value)}
                  />
                </div>

                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label>Interview Date</Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          className={cn(
                            "w-full justify-start text-left font-normal",
                            !date && "text-muted-foreground"
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {date ? format(date, "PPP") : "Select date"}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          mode="single"
                          selected={date}
                          onSelect={setDate}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="time">Interview Time</Label>
                    <Input
                      id="time"
                      type="time"
                      value={time}
                      onChange={(e) => setTime(e.target.value)}
                    />
                  </div>
                </div>

                <div className="pt-4">
                  <div className="rounded-md border p-4">
                    <div className="font-medium">Payment</div>
                    <p className="text-sm text-muted-foreground mb-4">
                      Complete payment to generate your passkey
                    </p>
                    
                    {paymentError && (
                      <div className="mb-4 text-destructive text-sm flex items-center">
                        <AlertCircle className="h-4 w-4 mr-1" />
                        {paymentError}
                      </div>
                    )}
                    
                    {!paymentComplete ? (
                      <div ref={razorpayFormRef}></div>
                    ) : (
                      <div className="bg-primary/10 text-primary rounded-md p-3 text-sm flex items-center">
                        <svg className="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                          <polyline points="22 4 12 14.01 9 11.01"></polyline>
                        </svg>
                        Payment completed
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button 
                  onClick={handleGeneratePasskey} 
                  disabled={isLoading || !paymentComplete}
                  className="w-full"
                >
                  {isLoading ? "Generating..." : "Generate Passkey"}
                </Button>
              </CardFooter>
            </Card>
          ) : (
            <Card>
              <CardHeader>
                <CardTitle>Passkey Generated</CardTitle>
                <CardDescription>
                  Your interview is scheduled successfully
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex flex-col items-center justify-center py-4">
                  <div className="text-4xl font-bold tracking-wider bg-gradient-to-r from-primary to-primary/70 text-transparent bg-clip-text mb-2">
                    {generatedPasskey}
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-1"
                    onClick={() => handleCopyToClipboard(generatedPasskey)}
                  >
                    <Copy className="h-3.5 w-3.5" />
                    <span>Copy</span>
                  </Button>
                </div>

                <div className="rounded-md bg-muted p-4 space-y-3">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Job Role:</span>
                    <span className="font-medium">{jobRole}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Company:</span>
                    <span className="font-medium">{company}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Interview Date:</span>
                    <span className="font-medium">{date ? format(date, "PPP") : ""}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Interview Time:</span>
                    <span className="font-medium">{time}</span>
                  </div>
                </div>

                <div className="space-y-2 text-center">
                  <p className="text-sm">
                    Share this passkey with your interviewer when prompted
                  </p>
                  <div className="flex justify-center gap-2 mt-4">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setGeneratedPasskey("");
                        setResumeFile(null);
                        setJobRole("");
                        setCompany("");
                        setJobDescription("");
                        setDate(undefined);
                        setTime("");
                        setResumeAnalysis("");
                        setResumeUrl("");
                      }}
                    >
                      Generate Another
                    </Button>
                    <Button
                      size="sm"
                      onClick={() => {
                        setGeneratedPasskey("");
                        setResumeFile(null);
                        setJobRole("");
                        setCompany("");
                        setJobDescription("");
                        setDate(undefined);
                        setTime("");
                        setResumeAnalysis("");
                        setResumeUrl("");
                        setShowPasskeyForm(false);
                      }}
                    >
                      Back to Overview
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      )}
    </div>
  );
};

export default CopilotSection;