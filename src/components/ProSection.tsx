import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { MessageSquare, FileText, Copy, BookOpen, Search } from "lucide-react";

// Helper function to safely interact with Chrome API
const useChromeAPI = () => {
  const isExtensionEnvironment = typeof chrome !== 'undefined' && chrome.tabs && chrome.runtime;
  
  const sendTabMessage = async (message: any): Promise<any> => {
    if (!isExtensionEnvironment) {
      console.warn("Not in extension environment, cannot send tab message");
      return { success: false, error: "Not in extension environment" };
    }
    
    try {
      const tabs = await new Promise<chrome.tabs.Tab[]>((resolve) => {
        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
          resolve(tabs);
        });
      });
      
      const activeTab = tabs[0];
      
      if (!activeTab?.id) {
        return { success: false, error: "No active tab found" };
      }
      
      return new Promise((resolve) => {
        chrome.tabs.sendMessage(activeTab.id, message, (response) => {
          if (chrome.runtime.lastError) {
            resolve({ success: false, error: chrome.runtime.lastError.message });
            return;
          }
          resolve(response || { success: false, error: "No response from content script" });
        });
      });
    } catch (error) {
      console.error("Error sending tab message:", error);
      return { success: false, error: String(error) };
    }
  };
  
  return { isExtensionEnvironment, sendTabMessage };
};

const ProSection = () => {
  const [selectedText, setSelectedText] = useState<string>("");
  const [aiResponse, setAiResponse] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const { toast } = useToast();
  const { isExtensionEnvironment, sendTabMessage } = useChromeAPI();
  
  // Handle extract selected text button
  const handleExtractSelected = async () => {
    try {
      if (!isExtensionEnvironment) {
        toast({
          title: "Not in Extension Environment",
          description: "This feature is only available in the Chrome extension.",
          variant: "destructive",
        });
        return;
      }
      
      const response = await sendTabMessage({ action: "START_SELECTION" });
      
      if (response?.success) {
        toast({
          title: "Selection Mode",
          description: "Click on an element to extract its text.",
        });
        
        // Close the popup to let the user interact with the page
        if (window.close) {
          window.close();
        }
      } else {
        throw new Error(response?.error || "Failed to start selection mode");
      }
    } catch (error) {
      console.error("Extract selected error:", error);
      toast({
        title: "Error",
        description: "Failed to extract text. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  // Handle read page button
  const handleReadPage = async () => {
    try {
      setIsLoading(true);
      
      if (!isExtensionEnvironment) {
        setSelectedText("This feature is only available in the Chrome extension.");
        setIsLoading(false);
        return;
      }
      
      const response = await sendTabMessage({ action: "EXTRACT_PAGE_CONTENT" });
      
      setIsLoading(false);
      
      if (response?.success) {
        setSelectedText(response.content);
        toast({
          title: "Page Read",
          description: "Page content extracted successfully.",
        });
      } else {
        throw new Error(response?.error || "Failed to read page");
      }
    } catch (error) {
      console.error("Read page error:", error);
      setIsLoading(false);
      toast({
        title: "Error",
        description: "Failed to read page. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  // Handle summarize button
  const handleSummarize = async () => {
    try {
      setIsLoading(true);
      
      // Check if text is selected
      if (!selectedText) {
        // Try to read the page first
        await handleReadPage();
      }
      
      // TODO: Connect to Groq AI for summarization
      // This should be handled by the background script
      
      // For now, we'll simulate a response
      await new Promise((resolve) => setTimeout(resolve, 1500));
      
      setAiResponse("This is a simulated summary of the content. In a real implementation, this would be generated by the Groq AI API based on the extracted content.");
      setIsLoading(false);
    } catch (error) {
      console.error("Summarize error:", error);
      setIsLoading(false);
      toast({
        title: "Error",
        description: "Failed to summarize content. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  // Handle ask question button
  const handleAskQuestion = async () => {
    try {
      const question = prompt("What would you like to ask about this content?");
      
      if (!question) return;
      
      setIsLoading(true);
      
      // TODO: Connect to Groq AI for question answering
      // This should be handled by the background script
      
      // For now, we'll simulate a response
      await new Promise((resolve) => setTimeout(resolve, 1500));
      
      setAiResponse(`Answer to "${question}": This is a simulated answer. In a real implementation, this would be generated by the Groq AI API based on your question and the extracted content.`);
      setIsLoading(false);
    } catch (error) {
      console.error("Ask question error:", error);
      setIsLoading(false);
      toast({
        title: "Error",
        description: "Failed to answer question. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  // Handle copy text button
  const handleCopyText = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied",
        description: "Text copied to clipboard.",
      });
    } catch (error) {
      console.error("Copy text error:", error);
      toast({
        title: "Error",
        description: "Failed to copy text. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>Pro Tools</CardTitle>
          <CardDescription>
            Extract text from websites and analyze with AI
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-2">
            <Button onClick={handleExtractSelected}>
              <FileText className="mr-2 h-4 w-4" />
              Extract Selected
            </Button>
            <Button onClick={handleReadPage} disabled={isLoading}>
              <BookOpen className="mr-2 h-4 w-4" />
              Read Page
            </Button>
            <Button onClick={handleSummarize} disabled={isLoading}>
              <FileText className="mr-2 h-4 w-4" />
              Summarize
            </Button>
            <Button onClick={handleAskQuestion} disabled={isLoading}>
              <Search className="mr-2 h-4 w-4" />
              Ask Question
            </Button>
          </div>

          {selectedText && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium">Extracted Content</h3>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => handleCopyText(selectedText)}
                >
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
              <Textarea
                value={selectedText}
                onChange={(e) => setSelectedText(e.target.value)}
                className="min-h-[100px]"
                placeholder="Extracted text will appear here..."
              />
            </div>
          )}

          {isLoading && (
            <div className="flex justify-center py-4">
              <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
            </div>
          )}

          {aiResponse && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium">AI Response</h3>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => handleCopyText(aiResponse)}
                >
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
              <div className="rounded-md bg-muted p-4">
                <div className="flex items-start space-x-2">
                  <MessageSquare className="mt-0.5 h-4 w-4 text-primary" />
                  <div className="text-sm">{aiResponse}</div>
                </div>
              </div>
            </div>
          )}
        </CardContent>
        <CardFooter className="text-xs text-muted-foreground">
          Make sure you're on the webpage you want to analyze
        </CardFooter>
      </Card>
    </div>
  );
};

export default ProSection;
